{"name":"Msdanalyzer","tagline":"A MATLAB class for Mean Square Displacement analysis.","body":"# Mean square displacement analysis of particle trajectories.\r\n\r\nMean square displacement (MSD) analysis is a technique commonly used in\r\ncolloidal studies and biophysics to determine what is the mode of\r\ndisplacement of particles followed over time. In particular, it can help\r\ndetermine whether the particle is:\r\n* freely diffusing;\r\n* transported;\r\n* bound and limited in its movement.\r\n\r\nOn top of this, it can also derive an estimate of the parameters of the\r\nmovement, such as the diffusion coefficient. \r\n\r\n<code>@msdanalyzer</code> is a MATLAB per-value class that helps performing this\r\nkind of analysis. The user provides several trajectories he measured, and\r\nthe class can derive meaningful quantities for the determination of the\r\nmovement modality, assuming that all particles follow the same movement\r\nmodel and sample the same environment.\r\n\r\nThis tutorial doubles the documentation of the class, that can be\r\naccessed in classical ways. We demonstrate here how to use it, using very\r\nbasic numerical simulations. The literature on MSD analysis is quite\r\ndense; in no way this beginner tutorial can hope to replace it. The\r\nexamples we use are trivial, and we do not discuss the complex but\r\nimportant matter of the results significance. A demanding user is\r\nreferred to the publications listed in this tutorial, and to the\r\nreferences they link.\r\n\r\n## Citing this work.\r\n\r\nIf you use this tool for your work, we kindly ask you to cite the\r\nfollowing article for which it was created:\r\n \r\nNadine Tarantino, Jean-Yves Tinevez, Elizabeth Faris Crowell, Bertrand\r\nBoisson, Ricardo Henriques, Musa Mhlanga, Fabrice Agou, Alain IsraÃ«l, and\r\nEmmanuel Laplantine. _TNF and IL-1 exhibit distinct ubiquitin\r\nrequirements for inducing NEMO-IKK supramolecular structures._ *J Cell\r\nBiol (2014)* vol. 204 (2) pp. 231-45\r\n\r\nhttp://jcb.rupress.org/content/204/2/231\r\n\r\n\r\n# Brownian motion and mean square displacement.\r\n\r\nAccording to Einstein theory (the first part), an ensemble of particles\r\nundergoing brownian motion will have the following density:\r\n\r\n$$ \\rho(r,t) = \\frac{\\rho_0}{\\sqrt{4\\pi Dt}} e^{-\\frac{r^2}{4Dt}} $$\r\n\r\nassuming all the particles where followed from a single point at |t=0|,\r\nthat |r| is the distance to this point, and |D| the diffusion\r\ncoefficient. This (and much more) can be found in Einstein historical\r\npaper [1].\r\n\r\nUsing this formula, one can derive the mean square displacement for such\r\nparticles:\r\n\r\n\r\n$$ < r^2 > = 2 d D t $$\r\n\r\nwhere |d| is the dimensionality of the problem (2 for 2D, etc...) and |D|\r\nthe diffusion coefficient. The mean is taken over a whole ensemble of\r\nparticles: you have to sample many particles, compute\r\n$\\textrm{msd}_i(\\tau) = (r_i(\\tau)-r_{i}(0))^2$ for each particle <code>i</code> and\r\naverage the resulting <code>msd_i</code> over all particles.\r\n\r\nWe see that the plot of the MSD value as a function of time should be a\r\nstraight line in the case of diffusing movement. We therefore have a way\r\nto check what is the modality of the particle movement. If the MSD is a\r\nline, then it is diffusing, and the slope gives us the diffusion\r\ncoefficient. If the MSD saturates and has a concave curvature, then its\r\nmovement is impeded: it cannot freely diffuse away from its starting\r\npoint. On the contrary, if the MSD increases faster than at linear rate,\r\nthen it must be transported, because Brownian motion could not take it\r\naway that fast.\r\n\r\nThis is great, because to decide whether the erratic movement of a\r\nparticle that you are observing is freely diffusive, bound, or\r\ntransported, you would have to follow the particle for an infinite\r\namount of time. This formula gives you a function that can be evaluated\r\nto check whether the particle movement is of any type. So we just need a\r\nway to evaluate it practically.\r\n\r\nExperimentally, the MSD for a single particle is also taken as a mean. If\r\nthe process is stationary (that is: the \"situation\", experimental\r\nconditions, etc...  do not change over time), the ensemble average can be\r\ntaken as a time average for a single trajectory, and |msd| for a single\r\nparticle can be calculated as\r\n\r\n$$\\textrm{msd}_i(\\tau) = \\sum_t (r_i(t+\\tau) - r_i(t) )^2$$\r\n\r\n$\\tau$ is called the delay; the MSD tells you how far can a particle\r\nunder Brownian motion can go over a time $\\tau$ . For finite\r\ntrajectories, obviously the smaller delays $\\tau$  will be more\r\nrepresented in the average than longer delays. For instance, if a\r\ntrajectory has |N| points in it, the delay corresponding to one frame\r\nwill have |N-1| points in the average, and the delay corresponding to |N|\r\nframes will only have one. This has major consequences on measurement\r\ncertainty, see [2].\r\n\r\n## |@msdanalyzer|: a MATLAB per-value class for MSD analysis.\r\n\r\nThe class presented here perform these computations automatically, and\r\noffers a lot of convenience methods to simplify the analysis of\r\ntrajectories. \r\n\r\nThe user must provide the class with particle trajectories, possibly\r\nseveral thousands of them. The class itself cannot generate those\r\ntrajectories. For this, you want to check single-particle tracking tools.\r\nHere are a few examples, drawn from Life-Sciences and my work:\r\n\r\n* <http://fiji.sc/wiki/index.php/Main_Page Fiji> ships a tracking tool\r\nnamed <http://fiji.sc/wiki/index.php/TrackMate TrackMate> made by yours\r\ntruly, that can deal rather well with Brownian motion. The software is a\r\nJava program. \r\n* <http://icy.bioimageanalysis.org/ Icy> is another Java\r\nsoftware dedicated to Life Science that also offers\r\n<http://icy.bioimageanalysis.org/plugin/Probabilistic_particle_tracker a\r\ntracking tool>.\r\n* If you already have the positions of all particles, and just need to\r\nlink them to build tracks, you can use in MATLAB the\r\n<http://www.mathworks.com/matlabcentral/fileexchange/34040-simple-tracker\r\nsimple tracker> tool, again made by yours truly. But it has a much\r\nsimpler capability compared that the two others.\r\n\r\nAnd there are most likely plenty of other solutions out there.\r\n\r\n|@msdanalyzer| can deal with tracks (particle trajectories) that do not\r\nstart all at the same time, have different lengths, have missing\r\ndetections (gaps: a particle fails to be detected in one or several frame\r\nthen reappear), and do not have the same time sampling. As soon as you\r\nadded your tracks to the class, everything is transparent. \r\nIt offers facilities to plot and inspect the data, whether for individual\r\nparticles, or on ensemble average quantities. It has several methods for\r\ncorrecting for drift, which is the main source of error in the analysis.\r\nOnce corrected, the data can analyzed via the MSD curves or via the\r\nvelocity autocorrelation. Automated fits of the MSD curves are included\r\n(but they require you have the curve fitting toolbox), allowing to derive\r\nthe type of motion and its characteristics.\r\n\r\nThe class code is made of one large monolithic file. This is not the best\r\nchoice for code sanity, but it eases its diffusion to you. I made sure\r\nthe documentation was extensive. In case of doubt, start with \r\n\r\n  doc msdanalyzer\r\n\r\nand will get a page where all methods and fields are detailed. \r\n\r\nTo document the class, we will play with toy examples, using simulated\r\ntrajectories, Our simulations will be kept simple, even trivial. There\r\nis a deep literature on the modeling of diffusion, but we will skip any\r\ncomplexities, at the expense of scientific relevance. See [3] for details\r\non modeling. \r\n\r\n## Tutorial content\r\n\r\n1. <a href=\"MSDTuto_brownian.html\">Simulating and analyzing Brownian motion</a>. Here\r\nwe introduce the class using the most simple example: a few particles\r\nundergoing a purely diffusive process. We will review all the important\r\nfunctions of the class for calculating and analyzing the MSD curves.\r\n2. <a href=\"MSDTuto_vcorr.html\">Velocities and velocity auto-correlation</a>. In this\r\nchapter we quickly review how to exploit the displacement and velocity\r\nautocorrelation function to analyze the particles motion.\r\n3. <a href=\"MSDTuto_error.html\">Impact of tracking and localization error</a>. We\r\nrefine a little bit the plain simulations of the previous chapter, trying\r\nto generate tracks that are more resembling experimental measurements. We\r\nreproduce some of the results of [4], investigating how these errors\r\nimpact the final analysis results. \r\n4. <a href=\"MSDTuto_directed.html\">Directed motion</a>. We deal with the case of\r\nparticles that have a directed motion on top of a Brownian motion. We\r\nintroduce how to distinguish between the two kind of motion, and exploit\r\nanalysis results to derive motion characteristics. \r\n5. <a href=\"MSDTuto_confined.html\">Confined movements</a>. This is just the converse\r\ncase: for this type of motion, the particle is not free to diffuse, but\r\nsomehow bound to a fixed structure or hindered in its movement by an\r\ninvisible fence. \r\n6. <a href=\"MSDTuto_drift.html\">Correcting for drift</a>. This chapter details what\r\nmethods are offered to correct for drift in measurements. It also\r\nprovides an assessment of the most adequate method. And conclude this\r\ntutorial.\r\n\r\nSince most of the complexity of the calculation is hidden in the\r\n|@msdanalyzer| class, these tutorial chapters involve mainly MATLAB code\r\nto generate and simulate fake particle trajectories. Some hacks are\r\npresented to facilitate the task, that I hope you will find useful as\r\nwell.\r\n\r\n\r\n\r\n## References\r\n\r\n\r\n\r\n1. <a href=\"http://users.physik.fu-berlin.de/~kleinert/files/eins_brownian.pdf\">\r\nEinstein. Investigations on the Theory of the Brownian Movement.  Ann. d.\r\nPhys (1926) vol. 17 pp. 549</a>\r\n2. <a href=\"http://www.sciencedirect.com/science/article/pii/S0006349591821257\">\r\nQian et al. Single particle tracking. Analysis of diffusion and flow in\r\ntwo-dimensional systems. Biophys J (1991) vol. 60 (4) pp. 910-21</a>\r\n3. <a href=\"http://link.springer.com/protocol/10.10072F978-1-59745-519-0_20\">\r\nSaxton. Modeling 2D and 3D diffusion. Methods Mol Biol (2007) vol. 400\r\npp. 295-321</a>\r\n4. <a href=\"http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3055791/\">Michalet. Mean\r\nsquare displacement analysis of single-particle trajectories with\r\nlocalization error: Brownian motion in an isotropic medium. Phys Rev E\r\nStat Nonlin Soft Matter Phys (2010) vol. 82 (4 Pt 1) pp. 041914</a>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}